[tool.poetry]
name = "br2-vision-based-smoothing"
version = "0.2.4"
description = "Video tracking and strain reconstruction algorithm for soft-arm project."
authors = ["Seung Hyun Kim <skim449@illinois.edu>"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "br2_vision" },
]

[tool.poetry.scripts]
undistort_rotate_video = 'br2_vision_cli.undistort_rotate_video:undistort_and_rotate'
sync_video = 'br2_vision_cli.sync_video:process'
crop_video = 'br2_vision_cli.crop_video:process'
trim_video_intervals_by_led = 'br2_vision_cli.trim_video_intervals_by_led:process'
trim_video_intervals_manual = 'br2_vision_cli.trim_video_intervals_manual:process'

select_origin = 'br2_vision_cli.add_origin:main'
select_calibration_points = 'br2_vision_cli.run_select_calibration_points:select_calibration_points'
extract_frames_from_video = 'br2_vision_cli.extract_frames_from_video:extract_frames'
dlt_calibration = 'br2_vision_cli.dlt_calibration:calibrate'

distortion_calibration = 'br2_vision_cli.distortion_calibration:calibrate'

set_optical_flow_inquiry = 'br2_vision_cli.add_initial_flow_point:main'
run_optical_flow = 'br2_vision_cli.run_optical_flow:main'
run_manual_tracking = 'br2_vision_cli.manual_tracking:main'
edit_optical_flow = 'br2_vision_cli.interactive_cutout_trajectory:launch'

render_tracking_video = 'br2_vision_cli.render_video:main'

interpolate_poses = 'br2_vision_cli.process_dlt:process_dlt'
run_smoothing = 'br2_vision_cli.run_smoothing:main'
visualize_smoothing = 'br2_vision_cli.visualize_smoothing:main'

overlay_framemark = 'br2_vision_cli.overlay_framemark:process'

tip_twist_angle = 'br2_vision_cli.tip_twist_angle:main'
bend_curve_angle = 'br2_vision_cli.bend_curv:main'

# h5 specific
h5_remove_dataset = 'br2_vision_cli.h5_remove_dataset:launch'

[tool.poetry.dependencies]
python = "^3.9,<3.12"
pyelastica = "^0.3.1.post1"
opencv-python = "^4.0"
tqdm = "^4.66.1"
scikit-learn = "^1.3.0"
scikit-spatial = "^7.0.0"
scipy = "^1.11.2"
matplotlib = "^3.7.2"
click = "^8.1.7"
psutil = "^5.9.6"
pyyaml = "^6.0.1"
pyqt6 = "^6.6.1"
dash = {extras = ["diskcache"], version = "^2.15.0"}
diskcache = "^5.6.3"
dash-bootstrap-components = "^1.5.0"
pandas = "^2.2.0"
h5py = "^3.10.0"
coverage = { version = "^7.4.4", extras = ["toml"] }
nptyping = "^2.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Enable pragma
    "pragma: no cover",
    "TODO",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == __main__:",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    '''class '.*\bProtocol\)':''',
    ''''@(abc\.)?'abstractmethod''',
    '\.\.\.'
]
#fail_under = 40
show_missing = true


[tool.coverage.run]
branch = true
omit = [
    "*/.local/*",
	"setup.py",
    "*/__init__.py",
    "*/tests/*",
]
